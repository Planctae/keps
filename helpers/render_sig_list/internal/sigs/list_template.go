package sigs

const upstreamListTemplate = `
package generated

// THIS IS AN AUTOGENERATED FILE, DO NOT EDIT BY HAND
// this package supports exported functions on SIGs and their associated
// subprojects and is generated by parsing SIG information at
//
// https://raw.githubusercontent.com/kubernetes/community/master/sigs.yaml
//
// this file SHOULD NOT export any methods as its intention is simply to
// provide data for eventually exported functions

{{ $ContentRoot := "content" }}

const (
	ContentRoot = "{{ $ContentRoot }}"
)

type PathInfo struct {
	OwningSIG string
	Subproject string
	KubernetesWide bool
	SIGWide bool
}

var InfoForPath = map[string]*PathInfo{
	".": &PathInfo{
		OwningSIG: "sig-architecture",
		KubernetesWide: true,
	},

	ContentRoot: &PathInfo{
		OwningSIG: "sig-architecture",
		KubernetesWide: true,
	},

	{{ with .SIGs }}
                {{ range . }}
			"{{ joinPath (canonicalSIGName .Name) }}": &PathInfo{
								OwningSIG: "{{ canonicalSIGName .Name }}",
								SIGWide: true,
							},
                {{ end }}
	{{ end }}

	{{ with .SIGs }}
		{{ range $_, $SIG := . }}
			{{ with .Subprojects }}
				{{ range $_, $Subproject := . }}
					"{{ joinPath (canonicalSIGName $SIG.Name) (canonicalName $Subproject.Name) }}": &PathInfo {
							OwningSIG: "{{ canonicalSIGName $SIG.Name }}",
							Subproject: "{{ canonicalName $Subproject.Name }}",
						 },
				{{ end }}
			{{ end }}
		{{ end }}
	{{ end }}
}

// SIGSet is the set of SIGs generated by KEP tooling helpers
// DO NOT EDIT BY HAND
var SIGSet = map[string]bool{
        {{ with .SIGs }}
                {{ range . }}
                        "{{canonicalSIGName .Name }}": true,
                {{ end }}
        {{ end }}
}

// SIGSubprojectMapping groups subprojects by their owning SIG
// DO NOT EDIT BY HAND
var SIGSubprojectMapping = map[string]map[string]bool{
         {{ with .SIGs }}
                {{ range . }}
                        "{{ canonicalSIGName .Name }}": map[string]bool {
                                {{ with .Subprojects }}
                                        {{ range . }}
                                                "{{ canonicalName .Name }}": true,
                                        {{ end }}
                                {{ end }}
                        },
                {{ end }}
        {{ end }}
}

var SIGList = []string{
        {{ with .SIGs }}
                {{ range . }}
                        "{{ canonicalSIGName .Name }}",
                {{ end }}
        {{ end }}
}
`
