// This file was generated by github.com/nelsam/hel.  Do not
// edit this code by hand unless you *really* know what you're
// doing.  Expect any changes made manually to be overwritten
// the next time hel regenerates this file.

package metadata_test

type mockRoutingInfoProvider struct {
	OwningSIGCalled chan bool
	OwningSIGOutput struct {
		Ret0 chan string
	}
	AffectedSubprojectsCalled chan bool
	AffectedSubprojectsOutput struct {
		Ret0 chan []string
	}
	ParticipatingSIGsCalled chan bool
	ParticipatingSIGsOutput struct {
		Ret0 chan []string
	}
	KubernetesWideCalled chan bool
	KubernetesWideOutput struct {
		Ret0 chan bool
	}
	SIGWideCalled chan bool
	SIGWideOutput struct {
		Ret0 chan bool
	}
	ContentDirCalled chan bool
	ContentDirOutput struct {
		Ret0 chan string
	}
}

func newMockRoutingInfoProvider() *mockRoutingInfoProvider {
	m := &mockRoutingInfoProvider{}
	m.OwningSIGCalled = make(chan bool, 100)
	m.OwningSIGOutput.Ret0 = make(chan string, 100)
	m.AffectedSubprojectsCalled = make(chan bool, 100)
	m.AffectedSubprojectsOutput.Ret0 = make(chan []string, 100)
	m.ParticipatingSIGsCalled = make(chan bool, 100)
	m.ParticipatingSIGsOutput.Ret0 = make(chan []string, 100)
	m.KubernetesWideCalled = make(chan bool, 100)
	m.KubernetesWideOutput.Ret0 = make(chan bool, 100)
	m.SIGWideCalled = make(chan bool, 100)
	m.SIGWideOutput.Ret0 = make(chan bool, 100)
	m.ContentDirCalled = make(chan bool, 100)
	m.ContentDirOutput.Ret0 = make(chan string, 100)
	return m
}
func (m *mockRoutingInfoProvider) OwningSIG() string {
	m.OwningSIGCalled <- true
	return <-m.OwningSIGOutput.Ret0
}
func (m *mockRoutingInfoProvider) AffectedSubprojects() []string {
	m.AffectedSubprojectsCalled <- true
	return <-m.AffectedSubprojectsOutput.Ret0
}
func (m *mockRoutingInfoProvider) ParticipatingSIGs() []string {
	m.ParticipatingSIGsCalled <- true
	return <-m.ParticipatingSIGsOutput.Ret0
}
func (m *mockRoutingInfoProvider) KubernetesWide() bool {
	m.KubernetesWideCalled <- true
	return <-m.KubernetesWideOutput.Ret0
}
func (m *mockRoutingInfoProvider) SIGWide() bool {
	m.SIGWideCalled <- true
	return <-m.SIGWideOutput.Ret0
}
func (m *mockRoutingInfoProvider) ContentDir() string {
	m.ContentDirCalled <- true
	return <-m.ContentDirOutput.Ret0
}
