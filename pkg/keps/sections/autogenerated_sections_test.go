package sections_test

import (
	"time"

	"github.com/calebamiles/keps/pkg/keps/metadata/metadatafakes"

	. "github.com/onsi/ginkgo"
	. "github.com/onsi/gomega"

	"github.com/calebamiles/keps/pkg/keps/sections"
)

var _ = Describe("sections generated by the KEP tooling", func() {
	Describe("IsAutogenerated()", func() {
		Context("given an autogenerated top level section", func() {
			It("returns true", func() {
				Expect(sections.IsAutogenerated(sections.Readme)).To(BeTrue(), "")
			})
		})

		Context("given a non autogenerated top level section", func() {
			It("returns false", func() {
				Expect(sections.IsAutogenerated(sections.Summary)).To(BeFalse(), "non autogenerated top level sections should not be marked as autogenerated")
			})
		})

		Context("given an arbitrary string", func() {
			It("returns false", func() {
				givenSectionName := "A Good Section Name"

				Expect(sections.IsAutogenerated(givenSectionName)).To(BeFalse(), "arbitrary section names should not be marked as autogenerated")
			})
		})
	})

	Describe("AutoGeneratedFrom()", func() {
		It("returns autogenerated sections from a KEP sections and metadata provider", func() {
			sectionOneLocation := "section_one.md"
			sectionTwoLocation := "section_two.md"
			now := time.Now().UTC()
			before := now.Add(-time.Hour)

			fakeMetadata := &metadatafakes.FakeKEP{}
			fakeMetadata.SectionLocationsReturns([]string{sectionOneLocation, sectionTwoLocation})
			fakeMetadata.CreatedReturns(before)
			fakeMetadata.LastUpdatedReturns(now)

			autoGeneratedEntries, err := sections.AutoGeneratedFrom(fakeMetadata)
			Expect(err).ToNot(HaveOccurred(), "autogenerating sections from metadata should return no error given valid metadata")

			Expect(autoGeneratedEntries).To(HaveLen(1), "autogenerated sections consist of: README")

		})
	})
})
