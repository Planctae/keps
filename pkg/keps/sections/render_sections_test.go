package sections_test

import (
	"github.com/calebamiles/keps/pkg/keps/metadata/metadatafakes"

	. "github.com/onsi/ginkgo"
	. "github.com/onsi/gomega"

	"github.com/calebamiles/keps/pkg/keps/sections"
)

var _ = Describe("Rendering KEP Sections", func() {
	Describe("RenderMissingForProvisionalState()", func() {
		Context("when all required sections are provided", func() {
			It("returns an empty slice", func() {
				givenSections := []string{
					sections.Summary,
					sections.Motivation,
				}

				renderingInfo := &metadatafakes.FakeKEP{}
				renderingInfo.SectionLocationsReturns(givenSections)

				newEntries, err := sections.RenderMissingForProvisionalState(renderingInfo)
				Expect(err).ToNot(HaveOccurred(), "expected no error to occur when rendering no sections for `Provisional` state")
				Expect(newEntries).To(BeEmpty(), "expected no sections to be rendered for `Provisional` state")
			})
		})

		It("returns the required sections for `Provisional` state", func() {
			givenSections := []string{}

			renderingInfo := &metadatafakes.FakeKEP{}
			renderingInfo.SectionLocationsReturns(givenSections)

			newEntries, err := sections.RenderMissingForProvisionalState(renderingInfo)
			Expect(err).ToNot(HaveOccurred(), "expected no error to occur when rendering the missing `Summary` and `Motivation` sections")
			Expect(newEntries).To(HaveLen(2), "expected two sections: Summary, and Motivation to be rendered")

			expectedSummary := newEntries[0]
			Expect(expectedSummary.Name()).To(Equal(sections.Summary), "expected the `Summary` section to be rendered")

			expectedMotivation := newEntries[1]
			Expect(expectedMotivation.Name()).To(Equal(sections.Motivation), "expected the `Motivation` section to be rendered")
		})
	})

	Describe("RenderMissingForImplementableState()", func() {
		Context("when all required sections are provided", func() {
			It("returns an empty slice", func() {
				givenSections := []string{
					sections.Summary,
					sections.Motivation,
					sections.DeveloperGuide,
					sections.OperatorGuide,
					sections.TeacherGuide,
					sections.GraduationCriteria,
				}

				renderingInfo := &metadatafakes.FakeKEP{}
				renderingInfo.SectionLocationsReturns(givenSections)

				newEntries, err := sections.RenderMissingForProvisionalState(renderingInfo)
				Expect(err).ToNot(HaveOccurred(), "expected no error to occur when rendering no sections for `Implementable` state")
				Expect(newEntries).To(BeEmpty(), "expected no sections to be rendered for `Implementable` state")
			})
		})

		It("returns the required sections for `Implementable` state", func() {
			givenSections := []string{}

			renderingInfo := &metadatafakes.FakeKEP{}
			renderingInfo.SectionLocationsReturns(givenSections)

			newEntries, err := sections.RenderMissingForImplementableState(renderingInfo)
			Expect(err).ToNot(HaveOccurred(), "expected no error to occur when rendering the missing `Summary`, `Motivation` sections")
			Expect(newEntries).To(HaveLen(6), "expected two sections: Summary, and Motivation to be rendered")

			expectedSummary := newEntries[0]
			Expect(expectedSummary.Name()).To(Equal(sections.Summary), "expected the `Summary` section to be rendered")

			expectedMotivation := newEntries[1]
			Expect(expectedMotivation.Name()).To(Equal(sections.Motivation), "expected the `Motivation` section to be rendered")

			expectedDeveloperGuide := newEntries[2]
			Expect(expectedDeveloperGuide.Name()).To(Equal(sections.DeveloperGuide), "expected the `Developer Guide` section to be rendered")

			expectedOperatorGuide := newEntries[3]
			Expect(expectedOperatorGuide.Name()).To(Equal(sections.OperatorGuide), "expected the `Operator Guide` section to be rendered")

			expectedTeacherGuide := newEntries[4]
			Expect(expectedTeacherGuide.Name()).To(Equal(sections.TeacherGuide), "expected the `Teacher Guide` section to be rendered")

			expectedGraduationCriteria := newEntries[5]
			Expect(expectedGraduationCriteria.Name()).To(Equal(sections.GraduationCriteria), "expected the `Graduation Criteria` section to be rendered")
		})

	})

	Describe("Render()", func() {
		Context("when top level rendering information exists for the provided section name", func() {
			It("returns an error", func() {
				fakeSectionName := "Not a Top Level Section"
				renderingInfo := &metadatafakes.FakeKEP{}

				_, err := sections.Render(renderingInfo, fakeSectionName)
				Expect(err).To(HaveOccurred(), "expect attempting to render a non top level KEP section to return error")
				Expect(err.Error()).To(ContainSubstring("no rendering information for section"), "expected error to contain information that given section name is not a top level KEP section")
			})
		})

		Context("when the given section name is autogenerated", func() {
			It("returns an error", func() {
				givenSectionName := sections.Readme
				renderingInfo := &metadatafakes.FakeKEP{}

				_, err := sections.Render(renderingInfo, givenSectionName)
				Expect(err).To(HaveOccurred(), "expect attempting to render an autogenerated top level KEP section to return error")
				Expect(err.Error()).To(ContainSubstring("Render should not be called directly for autogenerated sections"), "expected error to contain information about rendering autogenerated sections")
			})
		})

		It("renders the given section name with the given rendering info", func() {
			givenSectionName := sections.Summary
			renderingInfo := &metadatafakes.FakeKEP{}

			renderedSection, err := sections.Render(renderingInfo, givenSectionName)
			Expect(err).ToNot(HaveOccurred(), "expected no error when rendering Summary")

			Expect(renderedSection.Name()).To(Equal(sections.Summary), "expected section name to be `Summary` when rendering the `Summary` section")
			Expect(string(renderedSection.Content())).ToNot(BeEmpty(), "expected rendered `Summary` section to contain content")
			Expect(renderedSection.Filename()).To(Equal("summary.md"), "expected `Summary` section to have filename `summary.md`")
		})
	})
})
