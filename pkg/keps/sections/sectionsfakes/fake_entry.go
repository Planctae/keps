// Code generated by counterfeiter. DO NOT EDIT.
package sectionsfakes

import (
	sync "sync"

	sections "github.com/calebamiles/keps/pkg/keps/sections"
)

type FakeEntry struct {
	ContentStub        func() []byte
	contentMutex       sync.RWMutex
	contentArgsForCall []struct {
	}
	contentReturns struct {
		result1 []byte
	}
	contentReturnsOnCall map[int]struct {
		result1 []byte
	}
	FilenameStub        func() string
	filenameMutex       sync.RWMutex
	filenameArgsForCall []struct {
	}
	filenameReturns struct {
		result1 string
	}
	filenameReturnsOnCall map[int]struct {
		result1 string
	}
	NameStub        func() string
	nameMutex       sync.RWMutex
	nameArgsForCall []struct {
	}
	nameReturns struct {
		result1 string
	}
	nameReturnsOnCall map[int]struct {
		result1 string
	}
	PersistStub        func() error
	persistMutex       sync.RWMutex
	persistArgsForCall []struct {
	}
	persistReturns struct {
		result1 error
	}
	persistReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeEntry) Content() []byte {
	fake.contentMutex.Lock()
	ret, specificReturn := fake.contentReturnsOnCall[len(fake.contentArgsForCall)]
	fake.contentArgsForCall = append(fake.contentArgsForCall, struct {
	}{})
	fake.recordInvocation("Content", []interface{}{})
	fake.contentMutex.Unlock()
	if fake.ContentStub != nil {
		return fake.ContentStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.contentReturns
	return fakeReturns.result1
}

func (fake *FakeEntry) ContentCallCount() int {
	fake.contentMutex.RLock()
	defer fake.contentMutex.RUnlock()
	return len(fake.contentArgsForCall)
}

func (fake *FakeEntry) ContentCalls(stub func() []byte) {
	fake.contentMutex.Lock()
	defer fake.contentMutex.Unlock()
	fake.ContentStub = stub
}

func (fake *FakeEntry) ContentReturns(result1 []byte) {
	fake.contentMutex.Lock()
	defer fake.contentMutex.Unlock()
	fake.ContentStub = nil
	fake.contentReturns = struct {
		result1 []byte
	}{result1}
}

func (fake *FakeEntry) ContentReturnsOnCall(i int, result1 []byte) {
	fake.contentMutex.Lock()
	defer fake.contentMutex.Unlock()
	fake.ContentStub = nil
	if fake.contentReturnsOnCall == nil {
		fake.contentReturnsOnCall = make(map[int]struct {
			result1 []byte
		})
	}
	fake.contentReturnsOnCall[i] = struct {
		result1 []byte
	}{result1}
}

func (fake *FakeEntry) Filename() string {
	fake.filenameMutex.Lock()
	ret, specificReturn := fake.filenameReturnsOnCall[len(fake.filenameArgsForCall)]
	fake.filenameArgsForCall = append(fake.filenameArgsForCall, struct {
	}{})
	fake.recordInvocation("Filename", []interface{}{})
	fake.filenameMutex.Unlock()
	if fake.FilenameStub != nil {
		return fake.FilenameStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.filenameReturns
	return fakeReturns.result1
}

func (fake *FakeEntry) FilenameCallCount() int {
	fake.filenameMutex.RLock()
	defer fake.filenameMutex.RUnlock()
	return len(fake.filenameArgsForCall)
}

func (fake *FakeEntry) FilenameCalls(stub func() string) {
	fake.filenameMutex.Lock()
	defer fake.filenameMutex.Unlock()
	fake.FilenameStub = stub
}

func (fake *FakeEntry) FilenameReturns(result1 string) {
	fake.filenameMutex.Lock()
	defer fake.filenameMutex.Unlock()
	fake.FilenameStub = nil
	fake.filenameReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeEntry) FilenameReturnsOnCall(i int, result1 string) {
	fake.filenameMutex.Lock()
	defer fake.filenameMutex.Unlock()
	fake.FilenameStub = nil
	if fake.filenameReturnsOnCall == nil {
		fake.filenameReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.filenameReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeEntry) Name() string {
	fake.nameMutex.Lock()
	ret, specificReturn := fake.nameReturnsOnCall[len(fake.nameArgsForCall)]
	fake.nameArgsForCall = append(fake.nameArgsForCall, struct {
	}{})
	fake.recordInvocation("Name", []interface{}{})
	fake.nameMutex.Unlock()
	if fake.NameStub != nil {
		return fake.NameStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.nameReturns
	return fakeReturns.result1
}

func (fake *FakeEntry) NameCallCount() int {
	fake.nameMutex.RLock()
	defer fake.nameMutex.RUnlock()
	return len(fake.nameArgsForCall)
}

func (fake *FakeEntry) NameCalls(stub func() string) {
	fake.nameMutex.Lock()
	defer fake.nameMutex.Unlock()
	fake.NameStub = stub
}

func (fake *FakeEntry) NameReturns(result1 string) {
	fake.nameMutex.Lock()
	defer fake.nameMutex.Unlock()
	fake.NameStub = nil
	fake.nameReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeEntry) NameReturnsOnCall(i int, result1 string) {
	fake.nameMutex.Lock()
	defer fake.nameMutex.Unlock()
	fake.NameStub = nil
	if fake.nameReturnsOnCall == nil {
		fake.nameReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.nameReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeEntry) Persist() error {
	fake.persistMutex.Lock()
	ret, specificReturn := fake.persistReturnsOnCall[len(fake.persistArgsForCall)]
	fake.persistArgsForCall = append(fake.persistArgsForCall, struct {
	}{})
	fake.recordInvocation("Persist", []interface{}{})
	fake.persistMutex.Unlock()
	if fake.PersistStub != nil {
		return fake.PersistStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.persistReturns
	return fakeReturns.result1
}

func (fake *FakeEntry) PersistCallCount() int {
	fake.persistMutex.RLock()
	defer fake.persistMutex.RUnlock()
	return len(fake.persistArgsForCall)
}

func (fake *FakeEntry) PersistCalls(stub func() error) {
	fake.persistMutex.Lock()
	defer fake.persistMutex.Unlock()
	fake.PersistStub = stub
}

func (fake *FakeEntry) PersistReturns(result1 error) {
	fake.persistMutex.Lock()
	defer fake.persistMutex.Unlock()
	fake.PersistStub = nil
	fake.persistReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeEntry) PersistReturnsOnCall(i int, result1 error) {
	fake.persistMutex.Lock()
	defer fake.persistMutex.Unlock()
	fake.PersistStub = nil
	if fake.persistReturnsOnCall == nil {
		fake.persistReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.persistReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeEntry) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.contentMutex.RLock()
	defer fake.contentMutex.RUnlock()
	fake.filenameMutex.RLock()
	defer fake.filenameMutex.RUnlock()
	fake.nameMutex.RLock()
	defer fake.nameMutex.RUnlock()
	fake.persistMutex.RLock()
	defer fake.persistMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeEntry) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ sections.Entry = new(FakeEntry)
