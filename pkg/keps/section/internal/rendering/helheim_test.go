// This file was generated by github.com/nelsam/hel.  Do not
// edit this code by hand unless you *really* know what you're
// doing.  Expect any changes made manually to be overwritten
// the next time hel regenerates this file.

package rendering_test

import (
	"time"

	"github.com/calebamiles/keps/pkg/keps/section/internal/rendering"
	"github.com/calebamiles/keps/pkg/keps/states"
)

type mockSectionProvider struct {
	NameCalled chan bool
	NameOutput struct {
		Ret0 chan string
	}
	FilenameCalled chan bool
	FilenameOutput struct {
		Ret0 chan string
	}
	ContentCalled chan bool
	ContentOutput struct {
		Ret0 chan []byte
	}
}

func newMockSectionProvider() *mockSectionProvider {
	m := &mockSectionProvider{}
	m.NameCalled = make(chan bool, 100)
	m.NameOutput.Ret0 = make(chan string, 100)
	m.FilenameCalled = make(chan bool, 100)
	m.FilenameOutput.Ret0 = make(chan string, 100)
	m.ContentCalled = make(chan bool, 100)
	m.ContentOutput.Ret0 = make(chan []byte, 100)
	return m
}
func (m *mockSectionProvider) Name() string {
	m.NameCalled <- true
	return <-m.NameOutput.Ret0
}
func (m *mockSectionProvider) Filename() string {
	m.FilenameCalled <- true
	return <-m.FilenameOutput.Ret0
}
func (m *mockSectionProvider) Content() []byte {
	m.ContentCalled <- true
	return <-m.ContentOutput.Ret0
}

type mockInfoProvider struct {
	TitleCalled chan bool
	TitleOutput struct {
		Ret0 chan string
	}
	AuthorsCalled chan bool
	AuthorsOutput struct {
		Ret0 chan []string
	}
	OwningSIGCalled chan bool
	OwningSIGOutput struct {
		Ret0 chan string
	}
	StateCalled chan bool
	StateOutput struct {
		Ret0 chan states.Name
	}
	ContentDirCalled chan bool
	ContentDirOutput struct {
		Ret0 chan string
	}
	LastUpdatedCalled chan bool
	LastUpdatedOutput struct {
		Ret0 chan time.Time
	}
}

func newMockInfoProvider() *mockInfoProvider {
	m := &mockInfoProvider{}
	m.TitleCalled = make(chan bool, 100)
	m.TitleOutput.Ret0 = make(chan string, 100)
	m.AuthorsCalled = make(chan bool, 100)
	m.AuthorsOutput.Ret0 = make(chan []string, 100)
	m.OwningSIGCalled = make(chan bool, 100)
	m.OwningSIGOutput.Ret0 = make(chan string, 100)
	m.StateCalled = make(chan bool, 100)
	m.StateOutput.Ret0 = make(chan states.Name, 100)
	m.ContentDirCalled = make(chan bool, 100)
	m.ContentDirOutput.Ret0 = make(chan string, 100)
	m.LastUpdatedCalled = make(chan bool, 100)
	m.LastUpdatedOutput.Ret0 = make(chan time.Time, 100)
	return m
}
func (m *mockInfoProvider) Title() string {
	m.TitleCalled <- true
	return <-m.TitleOutput.Ret0
}
func (m *mockInfoProvider) Authors() []string {
	m.AuthorsCalled <- true
	return <-m.AuthorsOutput.Ret0
}
func (m *mockInfoProvider) OwningSIG() string {
	m.OwningSIGCalled <- true
	return <-m.OwningSIGOutput.Ret0
}
func (m *mockInfoProvider) State() states.Name {
	m.StateCalled <- true
	return <-m.StateOutput.Ret0
}
func (m *mockInfoProvider) ContentDir() string {
	m.ContentDirCalled <- true
	return <-m.ContentDirOutput.Ret0
}
func (m *mockInfoProvider) LastUpdated() time.Time {
	m.LastUpdatedCalled <- true
	return <-m.LastUpdatedOutput.Ret0
}

type mockInfoAndSectionProvider struct {
	TitleCalled chan bool
	TitleOutput struct {
		Ret0 chan string
	}
	AuthorsCalled chan bool
	AuthorsOutput struct {
		Ret0 chan []string
	}
	OwningSIGCalled chan bool
	OwningSIGOutput struct {
		Ret0 chan string
	}
	StateCalled chan bool
	StateOutput struct {
		Ret0 chan states.Name
	}
	ContentDirCalled chan bool
	ContentDirOutput struct {
		Ret0 chan string
	}
	LastUpdatedCalled chan bool
	LastUpdatedOutput struct {
		Ret0 chan time.Time
	}
	SectionsCalled chan bool
	SectionsOutput struct {
		Ret0 chan []rendering.SectionProvider
	}
}

func newMockInfoAndSectionProvider() *mockInfoAndSectionProvider {
	m := &mockInfoAndSectionProvider{}
	m.TitleCalled = make(chan bool, 100)
	m.TitleOutput.Ret0 = make(chan string, 100)
	m.AuthorsCalled = make(chan bool, 100)
	m.AuthorsOutput.Ret0 = make(chan []string, 100)
	m.OwningSIGCalled = make(chan bool, 100)
	m.OwningSIGOutput.Ret0 = make(chan string, 100)
	m.StateCalled = make(chan bool, 100)
	m.StateOutput.Ret0 = make(chan states.Name, 100)
	m.ContentDirCalled = make(chan bool, 100)
	m.ContentDirOutput.Ret0 = make(chan string, 100)
	m.LastUpdatedCalled = make(chan bool, 100)
	m.LastUpdatedOutput.Ret0 = make(chan time.Time, 100)
	m.SectionsCalled = make(chan bool, 100)
	m.SectionsOutput.Ret0 = make(chan []rendering.SectionProvider, 100)
	return m
}
func (m *mockInfoAndSectionProvider) Title() string {
	m.TitleCalled <- true
	return <-m.TitleOutput.Ret0
}
func (m *mockInfoAndSectionProvider) Authors() []string {
	m.AuthorsCalled <- true
	return <-m.AuthorsOutput.Ret0
}
func (m *mockInfoAndSectionProvider) OwningSIG() string {
	m.OwningSIGCalled <- true
	return <-m.OwningSIGOutput.Ret0
}
func (m *mockInfoAndSectionProvider) State() states.Name {
	m.StateCalled <- true
	return <-m.StateOutput.Ret0
}
func (m *mockInfoAndSectionProvider) ContentDir() string {
	m.ContentDirCalled <- true
	return <-m.ContentDirOutput.Ret0
}
func (m *mockInfoAndSectionProvider) LastUpdated() time.Time {
	m.LastUpdatedCalled <- true
	return <-m.LastUpdatedOutput.Ret0
}
func (m *mockInfoAndSectionProvider) Sections() []rendering.SectionProvider {
	m.SectionsCalled <- true
	return <-m.SectionsOutput.Ret0
}
