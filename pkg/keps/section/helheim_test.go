// This file was generated by github.com/nelsam/hel.  Do not
// edit this code by hand unless you *really* know what you're
// doing.  Expect any changes made manually to be overwritten
// the next time hel regenerates this file.

package section_test

import (
	"time"

	"github.com/calebamiles/keps/pkg/keps/states"
)

type mockRenderingInfoProvider struct {
	TitleCalled chan bool
	TitleOutput struct {
		Ret0 chan string
	}
	AuthorsCalled chan bool
	AuthorsOutput struct {
		Ret0 chan []string
	}
	OwningSIGCalled chan bool
	OwningSIGOutput struct {
		Ret0 chan string
	}
	StateCalled chan bool
	StateOutput struct {
		Ret0 chan states.Name
	}
	ContentDirCalled chan bool
	ContentDirOutput struct {
		Ret0 chan string
	}
	LastUpdatedCalled chan bool
	LastUpdatedOutput struct {
		Ret0 chan time.Time
	}
}

func newMockRenderingInfoProvider() *mockRenderingInfoProvider {
	m := &mockRenderingInfoProvider{}
	m.TitleCalled = make(chan bool, 100)
	m.TitleOutput.Ret0 = make(chan string, 100)
	m.AuthorsCalled = make(chan bool, 100)
	m.AuthorsOutput.Ret0 = make(chan []string, 100)
	m.OwningSIGCalled = make(chan bool, 100)
	m.OwningSIGOutput.Ret0 = make(chan string, 100)
	m.StateCalled = make(chan bool, 100)
	m.StateOutput.Ret0 = make(chan states.Name, 100)
	m.ContentDirCalled = make(chan bool, 100)
	m.ContentDirOutput.Ret0 = make(chan string, 100)
	m.LastUpdatedCalled = make(chan bool, 100)
	m.LastUpdatedOutput.Ret0 = make(chan time.Time, 100)
	return m
}
func (m *mockRenderingInfoProvider) Title() string {
	m.TitleCalled <- true
	return <-m.TitleOutput.Ret0
}
func (m *mockRenderingInfoProvider) Authors() []string {
	m.AuthorsCalled <- true
	return <-m.AuthorsOutput.Ret0
}
func (m *mockRenderingInfoProvider) OwningSIG() string {
	m.OwningSIGCalled <- true
	return <-m.OwningSIGOutput.Ret0
}
func (m *mockRenderingInfoProvider) State() states.Name {
	m.StateCalled <- true
	return <-m.StateOutput.Ret0
}
func (m *mockRenderingInfoProvider) ContentDir() string {
	m.ContentDirCalled <- true
	return <-m.ContentDirOutput.Ret0
}
func (m *mockRenderingInfoProvider) LastUpdated() time.Time {
	m.LastUpdatedCalled <- true
	return <-m.LastUpdatedOutput.Ret0
}
