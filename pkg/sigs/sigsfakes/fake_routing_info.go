// Code generated by counterfeiter. DO NOT EDIT.
package sigsfakes

import (
	sync "sync"

	sigs "github.com/calebamiles/keps/pkg/sigs"
)

type FakeRoutingInfo struct {
	AffectedSubprojectsStub        func() []string
	affectedSubprojectsMutex       sync.RWMutex
	affectedSubprojectsArgsForCall []struct {
	}
	affectedSubprojectsReturns struct {
		result1 []string
	}
	affectedSubprojectsReturnsOnCall map[int]struct {
		result1 []string
	}
	ContentDirStub        func() string
	contentDirMutex       sync.RWMutex
	contentDirArgsForCall []struct {
	}
	contentDirReturns struct {
		result1 string
	}
	contentDirReturnsOnCall map[int]struct {
		result1 string
	}
	KubernetesWideStub        func() bool
	kubernetesWideMutex       sync.RWMutex
	kubernetesWideArgsForCall []struct {
	}
	kubernetesWideReturns struct {
		result1 bool
	}
	kubernetesWideReturnsOnCall map[int]struct {
		result1 bool
	}
	OwningSIGStub        func() string
	owningSIGMutex       sync.RWMutex
	owningSIGArgsForCall []struct {
	}
	owningSIGReturns struct {
		result1 string
	}
	owningSIGReturnsOnCall map[int]struct {
		result1 string
	}
	ParticipatingSIGsStub        func() []string
	participatingSIGsMutex       sync.RWMutex
	participatingSIGsArgsForCall []struct {
	}
	participatingSIGsReturns struct {
		result1 []string
	}
	participatingSIGsReturnsOnCall map[int]struct {
		result1 []string
	}
	SIGWideStub        func() bool
	sIGWideMutex       sync.RWMutex
	sIGWideArgsForCall []struct {
	}
	sIGWideReturns struct {
		result1 bool
	}
	sIGWideReturnsOnCall map[int]struct {
		result1 bool
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRoutingInfo) AffectedSubprojects() []string {
	fake.affectedSubprojectsMutex.Lock()
	ret, specificReturn := fake.affectedSubprojectsReturnsOnCall[len(fake.affectedSubprojectsArgsForCall)]
	fake.affectedSubprojectsArgsForCall = append(fake.affectedSubprojectsArgsForCall, struct {
	}{})
	fake.recordInvocation("AffectedSubprojects", []interface{}{})
	fake.affectedSubprojectsMutex.Unlock()
	if fake.AffectedSubprojectsStub != nil {
		return fake.AffectedSubprojectsStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.affectedSubprojectsReturns
	return fakeReturns.result1
}

func (fake *FakeRoutingInfo) AffectedSubprojectsCallCount() int {
	fake.affectedSubprojectsMutex.RLock()
	defer fake.affectedSubprojectsMutex.RUnlock()
	return len(fake.affectedSubprojectsArgsForCall)
}

func (fake *FakeRoutingInfo) AffectedSubprojectsReturns(result1 []string) {
	fake.AffectedSubprojectsStub = nil
	fake.affectedSubprojectsReturns = struct {
		result1 []string
	}{result1}
}

func (fake *FakeRoutingInfo) AffectedSubprojectsReturnsOnCall(i int, result1 []string) {
	fake.AffectedSubprojectsStub = nil
	if fake.affectedSubprojectsReturnsOnCall == nil {
		fake.affectedSubprojectsReturnsOnCall = make(map[int]struct {
			result1 []string
		})
	}
	fake.affectedSubprojectsReturnsOnCall[i] = struct {
		result1 []string
	}{result1}
}

func (fake *FakeRoutingInfo) ContentDir() string {
	fake.contentDirMutex.Lock()
	ret, specificReturn := fake.contentDirReturnsOnCall[len(fake.contentDirArgsForCall)]
	fake.contentDirArgsForCall = append(fake.contentDirArgsForCall, struct {
	}{})
	fake.recordInvocation("ContentDir", []interface{}{})
	fake.contentDirMutex.Unlock()
	if fake.ContentDirStub != nil {
		return fake.ContentDirStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.contentDirReturns
	return fakeReturns.result1
}

func (fake *FakeRoutingInfo) ContentDirCallCount() int {
	fake.contentDirMutex.RLock()
	defer fake.contentDirMutex.RUnlock()
	return len(fake.contentDirArgsForCall)
}

func (fake *FakeRoutingInfo) ContentDirReturns(result1 string) {
	fake.ContentDirStub = nil
	fake.contentDirReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeRoutingInfo) ContentDirReturnsOnCall(i int, result1 string) {
	fake.ContentDirStub = nil
	if fake.contentDirReturnsOnCall == nil {
		fake.contentDirReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.contentDirReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeRoutingInfo) KubernetesWide() bool {
	fake.kubernetesWideMutex.Lock()
	ret, specificReturn := fake.kubernetesWideReturnsOnCall[len(fake.kubernetesWideArgsForCall)]
	fake.kubernetesWideArgsForCall = append(fake.kubernetesWideArgsForCall, struct {
	}{})
	fake.recordInvocation("KubernetesWide", []interface{}{})
	fake.kubernetesWideMutex.Unlock()
	if fake.KubernetesWideStub != nil {
		return fake.KubernetesWideStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.kubernetesWideReturns
	return fakeReturns.result1
}

func (fake *FakeRoutingInfo) KubernetesWideCallCount() int {
	fake.kubernetesWideMutex.RLock()
	defer fake.kubernetesWideMutex.RUnlock()
	return len(fake.kubernetesWideArgsForCall)
}

func (fake *FakeRoutingInfo) KubernetesWideReturns(result1 bool) {
	fake.KubernetesWideStub = nil
	fake.kubernetesWideReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeRoutingInfo) KubernetesWideReturnsOnCall(i int, result1 bool) {
	fake.KubernetesWideStub = nil
	if fake.kubernetesWideReturnsOnCall == nil {
		fake.kubernetesWideReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.kubernetesWideReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeRoutingInfo) OwningSIG() string {
	fake.owningSIGMutex.Lock()
	ret, specificReturn := fake.owningSIGReturnsOnCall[len(fake.owningSIGArgsForCall)]
	fake.owningSIGArgsForCall = append(fake.owningSIGArgsForCall, struct {
	}{})
	fake.recordInvocation("OwningSIG", []interface{}{})
	fake.owningSIGMutex.Unlock()
	if fake.OwningSIGStub != nil {
		return fake.OwningSIGStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.owningSIGReturns
	return fakeReturns.result1
}

func (fake *FakeRoutingInfo) OwningSIGCallCount() int {
	fake.owningSIGMutex.RLock()
	defer fake.owningSIGMutex.RUnlock()
	return len(fake.owningSIGArgsForCall)
}

func (fake *FakeRoutingInfo) OwningSIGReturns(result1 string) {
	fake.OwningSIGStub = nil
	fake.owningSIGReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeRoutingInfo) OwningSIGReturnsOnCall(i int, result1 string) {
	fake.OwningSIGStub = nil
	if fake.owningSIGReturnsOnCall == nil {
		fake.owningSIGReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.owningSIGReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeRoutingInfo) ParticipatingSIGs() []string {
	fake.participatingSIGsMutex.Lock()
	ret, specificReturn := fake.participatingSIGsReturnsOnCall[len(fake.participatingSIGsArgsForCall)]
	fake.participatingSIGsArgsForCall = append(fake.participatingSIGsArgsForCall, struct {
	}{})
	fake.recordInvocation("ParticipatingSIGs", []interface{}{})
	fake.participatingSIGsMutex.Unlock()
	if fake.ParticipatingSIGsStub != nil {
		return fake.ParticipatingSIGsStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.participatingSIGsReturns
	return fakeReturns.result1
}

func (fake *FakeRoutingInfo) ParticipatingSIGsCallCount() int {
	fake.participatingSIGsMutex.RLock()
	defer fake.participatingSIGsMutex.RUnlock()
	return len(fake.participatingSIGsArgsForCall)
}

func (fake *FakeRoutingInfo) ParticipatingSIGsReturns(result1 []string) {
	fake.ParticipatingSIGsStub = nil
	fake.participatingSIGsReturns = struct {
		result1 []string
	}{result1}
}

func (fake *FakeRoutingInfo) ParticipatingSIGsReturnsOnCall(i int, result1 []string) {
	fake.ParticipatingSIGsStub = nil
	if fake.participatingSIGsReturnsOnCall == nil {
		fake.participatingSIGsReturnsOnCall = make(map[int]struct {
			result1 []string
		})
	}
	fake.participatingSIGsReturnsOnCall[i] = struct {
		result1 []string
	}{result1}
}

func (fake *FakeRoutingInfo) SIGWide() bool {
	fake.sIGWideMutex.Lock()
	ret, specificReturn := fake.sIGWideReturnsOnCall[len(fake.sIGWideArgsForCall)]
	fake.sIGWideArgsForCall = append(fake.sIGWideArgsForCall, struct {
	}{})
	fake.recordInvocation("SIGWide", []interface{}{})
	fake.sIGWideMutex.Unlock()
	if fake.SIGWideStub != nil {
		return fake.SIGWideStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.sIGWideReturns
	return fakeReturns.result1
}

func (fake *FakeRoutingInfo) SIGWideCallCount() int {
	fake.sIGWideMutex.RLock()
	defer fake.sIGWideMutex.RUnlock()
	return len(fake.sIGWideArgsForCall)
}

func (fake *FakeRoutingInfo) SIGWideReturns(result1 bool) {
	fake.SIGWideStub = nil
	fake.sIGWideReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeRoutingInfo) SIGWideReturnsOnCall(i int, result1 bool) {
	fake.SIGWideStub = nil
	if fake.sIGWideReturnsOnCall == nil {
		fake.sIGWideReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.sIGWideReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeRoutingInfo) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.affectedSubprojectsMutex.RLock()
	defer fake.affectedSubprojectsMutex.RUnlock()
	fake.contentDirMutex.RLock()
	defer fake.contentDirMutex.RUnlock()
	fake.kubernetesWideMutex.RLock()
	defer fake.kubernetesWideMutex.RUnlock()
	fake.owningSIGMutex.RLock()
	defer fake.owningSIGMutex.RUnlock()
	fake.participatingSIGsMutex.RLock()
	defer fake.participatingSIGsMutex.RUnlock()
	fake.sIGWideMutex.RLock()
	defer fake.sIGWideMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeRoutingInfo) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ sigs.RoutingInfo = new(FakeRoutingInfo)
